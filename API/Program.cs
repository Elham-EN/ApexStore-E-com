using API.Data;
using API.Middleware;
using API.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using API.Services;
using API.RequestHelpers;

var  MyAllowSpecificOrigins = "_myAllowSpecificOrigins";

var builder = WebApplication.CreateBuilder(args);

// Get license key from configuration
var autoMapperLicenceKey = builder.Configuration["AutoMapper:LicenseKey"];

// Add services to the container: We can inject them into other classes 
builder.Services.Configure<CloudinarySettings>(builder.Configuration
    .GetSection("Cloudinary"));
builder.Services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();
// Registers StoreContext with dependency injection container
// Configures database provider to use SQLite
// Sets connection string from appsettings.json ("DefaultConnection")
// Makes StoreContext available for injection in controllers/services
builder.Services.AddDbContext<StoreContext>(opt =>
{
    opt.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

builder.Services.AddCors(options =>
{
    options.AddPolicy(name: MyAllowSpecificOrigins,
        policy =>
        {
            // Allow this origin: React App Client to access the API
            policy.WithOrigins("https://localhost:3000", "https://localhost:7214")
                  .AllowCredentials() // ✅  Enable credentials (cookies)
                  .AllowAnyMethod()   // ✅  Allow all HTTP methods
                  .AllowAnyHeader();  // ✅ Allow all headers
        });
});

builder.Services.AddAutoMapper(cfg =>
{
    cfg.LicenseKey = autoMapperLicenceKey;
},AppDomain.CurrentDomain.GetAssemblies());

// This middleware is registered as a transient service in the DI container
// because it implement the 'IMiddleware' interface and has constructor 
// dependencies. The transient lifetime ensures that a fresh instance of the
// middleware is created for each HTTP request for purely stateless operations.
builder.Services.AddTransient<ExceptionMiddleware>();

// Scoped to HTTP request: When HTTP request received & it's going to the 
// payment controller class & injected into it. When payment controller is
// created, then it also create new instance of payment service as well
builder.Services.AddScoped<PaymentsService>();

builder.Services.AddScoped<ImageService>();

// Sets up Identity with built-in API endpoints for user registration, 
// login, logout, and account management
builder.Services.AddIdentityApiEndpoints<User>(opt =>
{
    // The application requires each user to have their own, unique
    opt.User.RequireUniqueEmail = true;
})
// This enables features like assigning users to roles (Admin, User, etc.)
.AddRoles<IdentityRole>()
// StoreContext is the DbContext that will handle user, role, and 
// related data persistence
.AddEntityFrameworkStores<StoreContext>();

builder.Services.ConfigureApplicationCookie(options =>
{
    options.Cookie.HttpOnly = true;
    options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
    options.Cookie.SameSite = SameSiteMode.Strict; // CSRF protection
    // options.ExpireTimeSpan = TimeSpan.FromMinutes(60);
    // options.SlidingExpiration = true;
});

var app = builder.Build();

// Middleware: Configure the HTTP request pipeline.

// Usage in the pipeline - positioned first
app.UseMiddleware<ExceptionMiddleware>();

app.UseDefaultFiles();
app.UseStaticFiles();

if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
    // enables the Swagger middleware for serving the generated JSON 
    // document using the Swagger UI. Swagger is only enabled in a 
    // development environment.
    app.UseSwaggerUi(options =>
    {
        // The app uses the OpenAPI document generated by OpenApi, 
        // located at /openapi/v1.json, to generate the UI.
        options.DocumentPath = "/openapi/v1.json";
    });
}

app.UseCors(MyAllowSpecificOrigins);

// The App knows who the user is by validing their identity
app.UseAuthentication();
// The app to define what that person (Admin, user) is allow to do
app.UseAuthorization();

app.MapControllers();

// For Identity API Endpoints (give us the endpoints) e.g. //api/login
app.MapGroup("api").MapIdentityApi<User>();

app.MapFallbackToController("Index", "Fallback");

// Seeding Data to the Database
await DbInitializer.InitDb(app);

app.Run();
