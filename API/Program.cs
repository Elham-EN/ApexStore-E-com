using API.Data;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container: We can inject them into other classes 
builder.Services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();
// Registers StoreContext with dependency injection container
// Configures database provider to use SQLite
// Sets connection string from appsettings.json ("DefaultConnection")
// Makes StoreContext available for injection in controllers/services
builder.Services.AddDbContext<StoreContext>(opt =>
{
    opt.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection"));
});

var app = builder.Build();

// Middleware: Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
    // enables the Swagger middleware for serving the generated JSON 
    // document using the Swagger UI. Swagger is only enabled in a 
    // development environment.
    app.UseSwaggerUi(options =>
    {
        // The app uses the OpenAPI document generated by OpenApi, 
        // located at /openapi/v1.json, to generate the UI.
        options.DocumentPath = "/openapi/v1.json";
    });
}

app.MapControllers();

// Seeding Data to the Database
DbInitializer.InitDb(app);

app.Run();
